{
	"name": "Bronze to Silver",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpoolnsm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "712ddec9-354d-42bd-a0b9-3b6b4e5656c7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/bc7ce994-a6fb-46bc-a192-b2843bd6fcc6/resourceGroups/dataengg2/providers/Microsoft.Synapse/workspaces/synapsensm/bigDataPools/sparkpoolnsm",
				"name": "sparkpoolnsm",
				"type": "Spark",
				"endpoint": "https://synapsensm.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpoolnsm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Import Libraries"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import from_utc_timestamp, date_format\r\n",
					"from pyspark.sql.types  import TimestampType"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get Table Names"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"table_name = []\r\n",
					"for i in dbutils.fs.ls('/mnt/bronze/SalesLT/'):\r\n",
					"    table_name.append(i.name.split('/')[0])"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#table_name"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Update date timestamp values to date values"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for i in table_name:\r\n",
					"    input_path = '/mnt/bronze/SalesLT/'+i+'/'+i+'.parquet'\r\n",
					"    df = spark.read.format('parquet').load(input_path)\r\n",
					"    columns = df.columns\r\n",
					"\r\n",
					"    for col in columns:\r\n",
					"        if \"Date\" in col or \"date\" in col:\r\n",
					"            print(\"col\")\r\n",
					"            df = df.withColumn(col, date_format(from_utc_timestamp(df[col].cast(TimestampType()), \"UTC\"), \"yyyy-MM-dd\"))\r\n",
					"    output_path = '/mnt/silver/SalesLT/' + i + '/'\r\n",
					"    df.write.format('delta').mode('overwrite').save(output_path)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Verify the last table change\r\n",
					"#display(df)"
				],
				"execution_count": null
			}
		]
	}
}